// Copyright 2016 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.cloud.trace.util;

import java.security.SecureRandom;
import java.util.Random;

/**
 * A factory for generating new trace options whose trace option values are set based on a naive
 * sampling decision that is made based on the given sampling rate. The new trace options' stack
 * trace option is set to the provided value.
 *
 * @see Random
 * @see SecureRandom
 * @see TraceOptions
 * @see TraceOptionsFactory
 */
public class NaiveSamplingTraceOptionsFactory implements TraceOptionsFactory {
  private final Random random;
  private final double samplingRate;
  private final boolean stackTraceEnabled;

  /**
   * Creates a trace options factory that generates trace options based on sampling rate and samples
   * generated by the given {@link Random}.
   *
   * @param random            a random used to generate samples for the trace option value.
   * @param samplingRate      a double that is the ratio of generated trace options whose trace
   *                          option is true.
   * @param stackTraceEnabled the value of the new trace options' stack trace option.
   */
  public NaiveSamplingTraceOptionsFactory(
      Random random, double samplingRate, boolean stackTraceEnabled) {
    this.random = random;
    this.samplingRate = samplingRate;
    this.stackTraceEnabled = stackTraceEnabled;
  }

  /**
   * Creates a trace options factory that generates trace options based on sampling rate and samples
   * generated by a new {@link SecureRandom}, which is seeded with a default seed value.
   *
   * @param samplingRate      a double that is the ratio of generated trace options whose trace
   *                          option is true.
   * @param stackTraceEnabled the value of the new trace options' stack trace option.
   */
  public NaiveSamplingTraceOptionsFactory(double samplingRate, boolean stackTraceEnabled) {
    this(new SecureRandom(), samplingRate, stackTraceEnabled);
  }

  @Override
  public TraceOptions create() {
    boolean traceEnabled = random.nextDouble() <= samplingRate;
    return new TraceOptions()
        .overrideTraceEnabled(traceEnabled).overrideStackTraceEnabled(stackTraceEnabled);
  }

  @Override
  public TraceOptions create(TraceOptions traceOptions) {
    return traceOptions;
  }
}
